{"version":3,"sources":["components/Navbar.js","components/FormInput.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","onClick","toggleMode","id","For","placeholder","FormInput","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","filter","element","About","myStyle","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dfb65cbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <Link className=\"navbar-brand\" to=\"/About\">About</Link>\r\n                <div className={`form-check form-switch text-${props.mode ==='light'?'dark':'light'}`} >\r\n                    <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\"  For=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                </div>\r\n                    <form className=\"d-flex\">\r\n                        {/* <div className=\"bg-primary rounded mx-2 my-1\" style={{height:'30px',width:'30px',cursor:\"pointer\"}} onClick={()=>{props.toggleMode('primary')}} ></div> */}\r\n                        {/* <div className=\"bg-danger rounded mx-2 my-1\" style={{height:'30px',width:'30px',cursor:\"pointer\"}} onClick={()=>{props.toggleMode('danger')}} ></div> */}\r\n                        {/* <div className=\"bg-success rounded mx-2 my-1\" style={{height:'30px',width:'30px',cursor:\"pointer\"}} onClick={()=>{props.toggleMode('success')}} ></div> */}\r\n                        {/* <div className=\"bg-warning rounded mx-2 my-1\" style={{height:'30px',width:'30px',cursor:\"pointer\"}} onClick={()=>{props.toggleMode('warning')}} ></div> */}\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\"  type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>\r\n        </nav>\r\n            )\r\n}\r\n            Navbar.propTypes = {\r\n                title: propTypes.string,\r\n}","import React, {useState} from 'react';\r\n\r\n//const [count, setCount] = useState(0);\r\n\r\nexport default function FormInput(props) {\r\n    const handleUpClik = () =>{\r\n        //console.log(\"Uppercase clicked \");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted To Upper Case\", \"success\");\r\n    }\r\n    const handleDownClik = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted To Lower Case\", \"success\");\r\n    }\r\n    const handleClearClik = () =>{\r\n        let newText =\"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text has been cleared\", \"success\");\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = (event) =>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    //text = \"newtext\"; //wrong way to change the state\r\n    //setText(\"new text\");  //correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>            \r\n            <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#040527':'white', color: props.mode==='dark'?'white':'black'}}></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClik}>Convert to upper case</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleDownClik}>Convert to lower case</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClearClik}>Clear</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element) =>{return element.length!==0}).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element) =>{return element.length!==0}).length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter text to preview\"}</p>\r\n            </div>\r\n        </>\r\n            )\r\n}","//import React,{useState} from 'react';\r\nimport React from 'react';\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //         color: 'black',\r\n    //         backgroundColor: 'white'\r\n    // })\r\n\r\n    //const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n    let myStyle = {\r\n        color: props.mode ==='dark'?'white':'#1e1f3e',\r\n        backgroundColor: props.mode ==='dark'?'#1e1f3e':'white'\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h2 className=\"my-2\">About</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button style={myStyle} className=\"accordion-button collapsed \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                            Free to use\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\"  id=\"headingTwo\">\r\n                        <button style={myStyle} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Browser Compatible\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container my-2\">\r\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btnText}</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {props.alert &&<div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div> }           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import './App.css';\nimport Navbar from './components/Navbar';\nimport FormInput from './components/FormInput';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type    //bootstrap has alert, success, danger types\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  // const removeBodyClasses=()=>{\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-danger')\n  //   document.body.classList.remove('bg-success')\n  // }\n  // const toggleMode = (cls) => {\n  //   removeBodyClasses();\n  //   console.log(cls);\n  //   document.body.classList.add('bg-'+cls)\n  //   if (mode === 'light') {\n  //     setMode('dark');\n  //     document.body.style.backgroundColor = '#040527';\n  //     showAlert(\"Dark mode has been enabled\", \"success\");\n  //     document.title = \"Text-tutils Dark mode\";\n  //   }\n   const toggleMode = () => {\n     if (mode === 'light') {\n       setMode('dark');\n       document.body.style.backgroundColor = '#040527';\n       showAlert(\"Dark mode has been enabled\", \"success\");\n       document.title = \"Text-tutils Dark mode\";\n      //      setInterval(()=>{\n      //        document.title = \"Amazing site\";\n      //      },1000);\n      //      setInterval(()=>{\n      //        document.title = \"Amazing site\";\n      //      },1500);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"Text-tutils Light mode\";\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>          \n          <Route exact path=\"/\">\n        <FormInput showAlert={showAlert} heading=\"Enter your text to analyse\" mode={mode} />\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}